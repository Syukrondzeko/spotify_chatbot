import os
import logging
import pandas as pd
from dotenv import load_dotenv
import google.generativeai as genai
from qa.context_retrieval.retrieval_pipeline import retrieve_and_execute_pipeline

# Load environment variables from .env file
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize the Gemini model
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel("gemini-1.5-flash")

def qa_pipelines(user_question, agent_type="cohere"):
    """
    Retrieve context from SQL, then use Gemini to generate a response based on the retrieved context.

    Parameters:
    - user_question (str): The user's question.
    - agent_type (str): The type of retrieval agent to use ("cohere", "llama", "gemini").

    Returns:
    - str or None: The answer generated by Gemini, or None if no answer is generated.
    """
    logging.info("Retrieving context from SQL for the user question.")
    context_from_sql = retrieve_and_execute_pipeline(user_question, agent_type)

    if context_from_sql is None:
        logging.warning("No context found from SQL; the QA model may have insufficient context.")
        return None

    # Convert the context to a string
    context_text = context_from_sql.to_string(index=False) if isinstance(context_from_sql, pd.DataFrame) else str(context_from_sql)
    logging.info("Context successfully retrieved and formatted.")

    # Create a prompt for the Gemini model
    prompt = f"Using the following context:\nContext: {context_text}\nPlease answer the following question:\nQuestion: {user_question}"
    logging.info("Generated Prompt:\n%s", prompt)

    # Generate a response
    response = gemini_model.generate_content(prompt)
    if response and response.text:
        logging.info("Response generated by Gemini:\n%s", response.text)
        return response.text
    else:
        logging.warning("No response generated by Gemini.")
        return None

# Example usage
if __name__ == "__main__":
    question = "How many comments for each month in 2014?"
    agent = "cohere"  # or "llama" or "gemini" based on available agents
    answer = qa_pipelines(question, agent_type=agent)
    if answer:
        print("Gemini Answer:", answer)
    else:
        print("No answer was generated.")
